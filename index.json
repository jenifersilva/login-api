{
  "stats": {
    "suites": 2,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-19T19:51:17.510Z",
    "end": "2025-08-19T19:51:17.568Z",
    "duration": 58,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1cfa4634-a2b3-477b-bd0a-7749b7cbc263",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3094b68d-d642-404e-ae78-dafcfa68f14a",
          "title": "AuthController - isolado do Service",
          "fullFile": "/home/runner/work/login-api/login-api/tests/auth.controller.test.js",
          "file": "/tests/auth.controller.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"AuthController - isolado do Service\"",
              "fullTitle": "AuthController - isolado do Service \"before each\" hook in \"AuthController - isolado do Service\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "authServiceMock = sinon.stub(authService, \"validateLogin\");",
              "err": {},
              "uuid": "e81108b6-c7a4-49f7-b80c-a78f57a0da33",
              "parentUUID": "3094b68d-d642-404e-ae78-dafcfa68f14a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"AuthController - isolado do Service\"",
              "fullTitle": "AuthController - isolado do Service \"after each\" hook in \"AuthController - isolado do Service\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "authServiceMock.restore();",
              "err": {},
              "uuid": "39d50e1b-27a5-4622-b506-b6582910eb79",
              "parentUUID": "3094b68d-d642-404e-ae78-dafcfa68f14a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "deve retornar sucesso para login válido",
              "fullTitle": "AuthController - isolado do Service deve retornar sucesso para login válido",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "authServiceMock.returns({ success: true });\nconst resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"adminuser\", password: \"adminpass\" });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body.message).to.equal(\"Login realizado com sucesso!\");",
              "err": {},
              "uuid": "a3588cb0-4b15-45e4-88f8-baa9877947ae",
              "parentUUID": "3094b68d-d642-404e-ae78-dafcfa68f14a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se login não for informado",
              "fullTitle": "AuthController - isolado do Service deve falhar se login não for informado",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "authServiceMock.returns({\n  success: false,\n  message: \"Login e senha devem ser informados.\",\n});\nconst resposta = await request(app)\n  .post(\"/login\")\n  .send({ password: \"adminpass\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body.message).to.equal(\n  \"Login e senha devem ser informados.\"\n);",
              "err": {},
              "uuid": "598fb767-a13a-4038-9bfc-4f0aa875bf1f",
              "parentUUID": "3094b68d-d642-404e-ae78-dafcfa68f14a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se senha não for informada",
              "fullTitle": "AuthController - isolado do Service deve falhar se senha não for informada",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "authServiceMock.returns({\n  success: false,\n  message: \"Login e senha devem ser informados.\",\n});\nconst resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"adminuser\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body.message).to.equal(\n  \"Login e senha devem ser informados.\"\n);",
              "err": {},
              "uuid": "e603c345-49be-4cba-86a3-f0e6fe85a971",
              "parentUUID": "3094b68d-d642-404e-ae78-dafcfa68f14a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se login tiver menos de 6 caracteres",
              "fullTitle": "AuthController - isolado do Service deve falhar se login tiver menos de 6 caracteres",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "authServiceMock.returns({\n  success: false,\n  message: \"Login deve ter mais que 5 caracteres.\",\n});\nconst resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"admin\", password: \"adminpass\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body.message).to.equal(\n  \"Login deve ter mais que 5 caracteres.\"\n);",
              "err": {},
              "uuid": "c26fcbc7-eb4f-4afc-bd9c-62529948e971",
              "parentUUID": "3094b68d-d642-404e-ae78-dafcfa68f14a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se senha tiver menos de 6 caracteres",
              "fullTitle": "AuthController - isolado do Service deve falhar se senha tiver menos de 6 caracteres",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "authServiceMock.returns({\n  success: false,\n  message: \"Senha deve ter mais que 5 caracteres.\",\n});\nconst resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"adminuser\", password: \"admin\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body.message).to.equal(\n  \"Senha deve ter mais que 5 caracteres.\"\n);",
              "err": {},
              "uuid": "8d93179c-5b75-44ec-b33a-79b41ecdcc5d",
              "parentUUID": "3094b68d-d642-404e-ae78-dafcfa68f14a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se credenciais estiverem incorretas",
              "fullTitle": "AuthController - isolado do Service deve falhar se credenciais estiverem incorretas",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "authServiceMock.returns({\n  success: false,\n  message: \"Credenciais inválidas.\",\n});\nconst resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"adminuser\", password: \"wrongpass\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body.message).to.equal(\"Credenciais inválidas.\");",
              "err": {},
              "uuid": "bc40b77e-5903-49de-99d6-d69546b91019",
              "parentUUID": "3094b68d-d642-404e-ae78-dafcfa68f14a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a3588cb0-4b15-45e4-88f8-baa9877947ae",
            "598fb767-a13a-4038-9bfc-4f0aa875bf1f",
            "e603c345-49be-4cba-86a3-f0e6fe85a971",
            "c26fcbc7-eb4f-4afc-bd9c-62529948e971",
            "8d93179c-5b75-44ec-b33a-79b41ecdcc5d",
            "bc40b77e-5903-49de-99d6-d69546b91019"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e8369ec-b7a9-42a1-9a71-2d23fdd89a9e",
          "title": "Login API",
          "fullFile": "/home/runner/work/login-api/login-api/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve retornar sucesso para login válido",
              "fullTitle": "Login API deve retornar sucesso para login válido",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"adminuser\", password: \"adminpass\" });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property(\n  \"message\",\n  \"Login realizado com sucesso!\"\n);",
              "err": {},
              "uuid": "7653f1d9-f457-4af7-8c4e-0f491c0907d0",
              "parentUUID": "3e8369ec-b7a9-42a1-9a71-2d23fdd89a9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se login não for informado",
              "fullTitle": "Login API deve falhar se login não for informado",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post(\"/login\")\n  .send({ password: \"adminpass\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  \"message\",\n  \"Login e senha devem ser informados.\"\n);",
              "err": {},
              "uuid": "263ac52b-6ec2-4c5f-b693-6e7b3d7fd4de",
              "parentUUID": "3e8369ec-b7a9-42a1-9a71-2d23fdd89a9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se senha não for informada",
              "fullTitle": "Login API deve falhar se senha não for informada",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"adminuser\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  \"message\",\n  \"Login e senha devem ser informados.\"\n);",
              "err": {},
              "uuid": "a91b699c-6e4a-4cd3-b67e-6e6bfccf7ae4",
              "parentUUID": "3e8369ec-b7a9-42a1-9a71-2d23fdd89a9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se login tiver menos de 6 caracteres",
              "fullTitle": "Login API deve falhar se login tiver menos de 6 caracteres",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"admin\", password: \"adminpass\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  \"message\",\n  \"Login deve ter mais que 5 caracteres.\"\n);",
              "err": {},
              "uuid": "040d0d88-c92e-4c1f-b817-339ff7554621",
              "parentUUID": "3e8369ec-b7a9-42a1-9a71-2d23fdd89a9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se senha tiver menos de 6 caracteres",
              "fullTitle": "Login API deve falhar se senha tiver menos de 6 caracteres",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"adminuser\", password: \"admin\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  \"message\",\n  \"Senha deve ter mais que 5 caracteres.\"\n);",
              "err": {},
              "uuid": "29b7f96e-945b-400d-ae64-2f4b4070a879",
              "parentUUID": "3e8369ec-b7a9-42a1-9a71-2d23fdd89a9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve falhar se credenciais estiverem incorretas",
              "fullTitle": "Login API deve falhar se credenciais estiverem incorretas",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post(\"/login\")\n  .send({ login: \"adminuser\", password: \"wrongpass\" });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\"message\", \"Credenciais inválidas.\");",
              "err": {},
              "uuid": "dc4b5a66-edb6-4829-b080-a6c97953820b",
              "parentUUID": "3e8369ec-b7a9-42a1-9a71-2d23fdd89a9e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7653f1d9-f457-4af7-8c4e-0f491c0907d0",
            "263ac52b-6ec2-4c5f-b693-6e7b3d7fd4de",
            "a91b699c-6e4a-4cd3-b67e-6e6bfccf7ae4",
            "040d0d88-c92e-4c1f-b817-339ff7554621",
            "29b7f96e-945b-400d-ae64-2f4b4070a879",
            "dc4b5a66-edb6-4829-b080-a6c97953820b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "report",
        "reportFilename": "index",
        "quiet": "true"
      },
      "version": "6.2.0"
    }
  }
}